同步类容器是线程安全的,但是在某些场景下可能需要加锁来保护复合操作.
复合类操作如:
	迭代(反复访问元素,遍历容器中所有的元素),跳转(根据指定的顺序找到当前元素的下一个元素)
	跳转(根据指定的顺序找到当前元素的下一个元素)
	条件预算.
	
这些复合操作在多线程并发的修改容器时,可能会表现出意外的行为.
	最经典的便是ConcurrentModificationException,原因是
	当容器迭代的过程中被并发的修改了内容,这是由于早起迭代器设计时,
	并没有考虑兵法修改的问题
	
同步容器类:
	如古老的vector,Hashtable这些容器的同步功能都是由JDK的Collections,synchronized..
	等工厂方法创建实现的.其底层的机制无非就是用传统的cynchronized关键字对每个公用的方法进行了同步,
	使得每次每次只有一个线程访问容器的状态.折合宁县不是我们今天互联网时代高并发的需求,在保证线程安全的同时,
	也需要有足够好的性能.